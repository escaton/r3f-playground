{"version":3,"sources":["utils.ts","shaders.ts","App.tsx","index.tsx"],"names":["R","x","y","t","Math","floor","cos","G","sin","B","snoise","rgb","args","Gradient","meshRef","useRef","j","random","vCheck","useFrame","material","Array","isArray","current","uniforms","u_randomisePosition","value","u_time","u_color1","rotation","z","useMemo","u_bg","type","u_bgMain","u_color2","ref","position","scale","fragmentShader","shaders","vertexShader","App","appRef","useState","isFS","setIsFS","useEffect","onFullscreenChange","document","fullscreenElement","addEventListener","removeEventListener","className","style","opacity","onClick","requestFullscreen","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.08ad30f8.chunk.js","sourcesContent":["type RGBFunc = (x: number, y: number, t: number) => number;\n\nexport const R: RGBFunc = function (x, y, t) {\n    return Math.floor(192 + 64 * Math.cos((x * x - y * y) / 300 + t));\n};\n\nexport const G: RGBFunc = function (x, y, t) {\n    return Math.floor(\n        192 +\n            64 *\n                Math.sin(\n                    (x * x * Math.cos(t / 4) + y * y * Math.sin(t / 3)) / 300\n                )\n    );\n};\n\nexport const B: RGBFunc = function (x, y, t) {\n    return Math.floor(\n        192 +\n            64 *\n                Math.sin(\n                    5 * Math.sin(t / 9) +\n                        ((x - 100) * (x - 100) + (y - 100) * (y - 100)) / 1100\n                )\n    );\n};\n","export const snoise = `\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n`;\n\nexport const vertex = `\nuniform float u_time;\nuniform vec2 u_randomisePosition;\n\nvarying float vDistortion;\nvarying float xDistortion;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vDistortion = snoise(vUv.xx * 3. - u_randomisePosition * 0.15);\n    xDistortion = snoise(vUv.yy * 1. - u_randomisePosition * 0.05);\n    vec3 pos = position;\n    pos.z += (vDistortion * 35.);\n    pos.x += (xDistortion * 25.);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n`\n\nexport const fragment = `\nvec3 rgb(float r, float g, float b) {\n    return vec3(r / 255., g / 255., b / 255.);\n}\n\nvec3 rgb(float c) {\n    return vec3(c / 255., c / 255., c / 255.);\n}\n\nuniform vec3 u_bg;\nuniform vec3 u_bgMain;\nuniform vec3 u_color1;\nuniform vec3 u_color2;\nuniform float u_time;\n\nvarying vec2 vUv;\nvarying float vDistortion;\n\nvoid main() {\n    vec3 bg = rgb(u_bg.r, u_bg.g, u_bg.b);\n    vec3 c1 = rgb(u_color1.r, u_color1.g, u_color1.b);\n    vec3 c2 = rgb(u_color2.r, u_color2.g, u_color2.b);\n    vec3 bgMain = rgb(u_bgMain.r, u_bgMain.g, u_bgMain.b);\n\n    float noise1 = snoise(vUv + u_time * 0.08);\n    float noise2 = snoise(vUv * 2. + u_time * 0.1);\n\n    vec3 color = bg;\n    color = mix(color, c1, noise1 * 0.6);\n    color = mix(color, c2, noise2 * .4);\n    color = mix(color, mix(c1, c2, vUv.x), vDistortion);\n\n    float border = smoothstep(0.1, 0.6, vUv.x);\n\n    color = mix(color, bgMain, 1. -border);\n\n    gl_FragColor = vec4(color, 1.0);\n}\n`","import { FC, useEffect, useMemo, useRef, useState } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { Mesh, ShaderMaterial } from 'three';\n\nimport { R, G, B } from './utils';\nimport * as shaders from './shaders';\n\nimport './App.css';\n\nconst rgb = <T extends any>(...args: T[]): T[] => args;\n\nfunction App() {\n    const appRef = useRef<HTMLDivElement>(null!);\n    const onClick = () => {\n        appRef.current.requestFullscreen();\n    };\n\n    const [isFS, setIsFS] = useState(false);\n\n    useEffect(() => {\n        const onFullscreenChange = () => {\n            setIsFS(!!document.fullscreenElement);\n        };\n        document.addEventListener('fullscreenchange', onFullscreenChange);\n        onFullscreenChange();\n        return () =>\n            document.removeEventListener(\n                'fullscreenchange',\n                onFullscreenChange\n            );\n    }, []);\n\n    return (\n        <div className=\"App\" ref={appRef}>\n            <Canvas>\n                <Gradient />\n            </Canvas>\n            <div\n                className=\"go-to-fs\"\n                style={{ opacity: isFS ? 0 : .5 }}\n                onClick={onClick}\n            >\n                fullscreen\n            </div>\n        </div>\n    );\n}\n\nconst Gradient: FC = () => {\n    const meshRef = useRef<Mesh>(null!);\n\n    const j = useRef(0);\n    const t = useRef(0);\n    const x = useRef(Math.random() * 32);\n    const y = useRef(Math.random() * 32);\n    const vCheck = useRef(false);\n\n    useFrame(() => {\n        const material = Array.isArray(meshRef.current.material)\n            ? (meshRef.current.material[0] as ShaderMaterial)\n            : (meshRef.current.material as ShaderMaterial);\n        material.uniforms.u_randomisePosition.value = [j.current, j.current];\n        material.uniforms.u_time.value = t.current;\n        material.uniforms.u_color1.value = [\n            R(x.current, y.current, t.current / 2),\n            G(x.current, y.current, t.current / 2),\n            B(x.current, y.current, t.current / 2),\n        ];\n        meshRef.current.rotation.z = -t.current / 60;\n\n        j.current += 0.01;\n        t.current += 0.05;\n\n        if (t.current % 0.1 === 0) {\n            if (vCheck.current === false) {\n                x.current -= 1;\n                if (x.current <= 0) {\n                    vCheck.current = true;\n                }\n            } else {\n                x.current += 1;\n                if (x.current >= 32) {\n                    vCheck.current = false;\n                }\n            }\n        }\n    });\n\n    const uniforms = useMemo(\n        () => ({\n            u_bg: { type: 'v3', value: rgb(162, 138, 241) },\n            u_bgMain: { type: 'v3', value: rgb(162, 138, 241) },\n            u_color1: { type: 'v3', value: rgb(162, 138, 241) },\n            u_color2: { type: 'v3', value: rgb(82, 31, 241) },\n            u_time: { type: 'f', value: 0 },\n            u_randomisePosition: {\n                type: 'v2',\n                value: [1, 2],\n            },\n        }),\n        []\n    );\n\n    return (\n        <mesh\n            ref={meshRef}\n            position={[0, 0, -280]}\n            scale={[4, 4, 4]}\n            rotation={[0, 0, 1]}\n        >\n            <planeGeometry args={[400, 400, 100, 100]} />\n            <shaderMaterial\n                uniforms={uniforms}\n                fragmentShader={shaders.snoise + shaders.fragment}\n                vertexShader={shaders.snoise + shaders.vertex}\n            ></shaderMaterial>\n        </mesh>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}